package prekeyserver

import (
	"math/big"
	"time"

	"github.com/coyim/gotrax"
	"github.com/otrv4/ed448"
	. "gopkg.in/check.v1"
)

func (s *GenericServerSuite) Test_dake1Message_shouldSerializeCorrectly(c *C) {
	d1 := &dake1Message{}
	d1.instanceTag = 0x4253112A
	d1.i = generatePointFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF})
	d1.clientProfile = &gotrax.ClientProfile{}
	d1.clientProfile.InstanceTag = 0x4253112A
	d1.clientProfile.PublicKey = generatePublicKeyFrom([symKeyLength]byte{0xAB, 0x42})
	d1.clientProfile.ForgingKey = gotrax.CreatePublicKey(generatePublicKeyFrom([symKeyLength]byte{0xCD, 0x53}).K(), gotrax.ForgingKey)
	d1.clientProfile.Versions = []byte{0x04}
	d1.clientProfile.Expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	d1.clientProfile.DsaKey = nil
	d1.clientProfile.TransitionalSignature = nil
	d1.clientProfile.Sig = gotrax.CreateEddsaSignature([114]byte{0x15, 0x00, 0x00, 0x00, 0x12})

	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x35,

		// instance tag
		0x42, 0x53, 0x11, 0x2A,

		// client profile:
		0x0, 0x0, 0x0, 0x5,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// forging key
		0x00, 0x03, 0x00, 0x12,
		0x07, 0x98, 0xea, 0x0b, 0x4a, 0x8c, 0x23, 0x1d,
		0x7a, 0x5b, 0x6e, 0x13, 0x98, 0x11, 0xf1, 0x78,
		0xa5, 0x67, 0xca, 0x6c, 0x8b, 0xf9, 0xd9, 0xfb,
		0xf4, 0x5b, 0x91, 0x45, 0x2d, 0xbf, 0x3f, 0x91,
		0xae, 0xb4, 0x64, 0xb4, 0xab, 0x98, 0x3a, 0x3f,
		0x51, 0x3b, 0x62, 0xdf, 0x91, 0x82, 0x2a, 0x39,
		0x77, 0x9d, 0x9b, 0xcf, 0x02, 0x9a, 0xcc, 0x2c,
		0x80,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// i:
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,
	}

	c.Assert(d1.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_dake1Message_shouldDeserializeCorrectly(c *C) {
	d1 := &dake1Message{}
	_, ok := d1.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x35,

		// instance tag
		0x42, 0x53, 0x11, 0x2A,

		// client profile:
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// i:
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,
	})

	c.Assert(ok, Equals, true)
	c.Assert(d1.instanceTag, Equals, uint32(0x4253112A))
	c.Assert(d1.clientProfile.InstanceTag, Equals, uint32(0x4253112A))
	c.Assert(d1.clientProfile.PublicKey.K().Equals(generatePublicKeyFrom([symKeyLength]byte{0xAB, 0x42}).K()), Equals, true)
	c.Assert(d1.clientProfile.Versions, DeepEquals, []byte{0x04})
	c.Assert(d1.clientProfile.Expiration, Equals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(d1.clientProfile.DsaKey, IsNil)
	c.Assert(d1.clientProfile.TransitionalSignature, IsNil)
	c.Assert(d1.clientProfile.Sig, DeepEquals, gotrax.CreateEddsaSignature([114]byte{0x15, 0x00, 0x00, 0x00, 0x12}))
	c.Assert(d1.i.Equals(generatePointFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF})), Equals, true)
}

func (s *GenericServerSuite) Test_dake1Message_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	d1 := &dake1Message{}
	_, ok := d1.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = d1.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake1Message_deserialize_shouldFailIfVersionIsIncorrect(c *C) {
	d1 := &dake1Message{}
	_, ok := d1.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x35,

		// instance tag
		0x42, 0x53, 0x11, 0x2A,

		// client profile:
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// i:
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake1Message_deserialize_shouldFailIfNotLongEnoughForMessageType(c *C) {
	d1 := &dake1Message{}
	_, ok := d1.deserialize([]byte{
		// version
		0x00, 0x04,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake1Message_deserialize_shouldFailIfMessageTypeIsIncorrect(c *C) {
	d1 := &dake1Message{}
	_, ok := d1.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// instance tag
		0x42, 0x53, 0x11, 0x2A,

		// client profile:
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// i:
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake1Message_deserialize_shouldFailIfNotLongEnoughForInstanceTag(c *C) {
	d1 := &dake1Message{}
	_, ok := d1.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x35,
	})

	c.Assert(ok, Equals, false)

	_, ok = d1.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x01,

		0x00, 0x00, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake1Message_deserialize_shouldFailIfClientProfileFailsToDeserialize(c *C) {
	d1 := &dake1Message{}
	_, ok := d1.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x35,

		// instance tag
		0x42, 0x53, 0x11, 0x2A,

		// client profile:
		0x0, 0x0, 0x0,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake1Message_deserialize_shouldFailIfPointFailsToDeserialize(c *C) {
	d1 := &dake1Message{}
	_, ok := d1.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x35,

		// instance tag
		0x42, 0x53, 0x11, 0x2A,

		// client profile:
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// i:
		0x62, 0x38, 0x7d, 0xcd, 0x13, 0x84, 0x21, 0x0e,
		0x62, 0xcf, 0xaf, 0x06, 0x7f, 0x49, 0x02, 0x8c,
		0xdd, 0xfe, 0x99, 0xb9, 0x01, 0x59, 0x66, 0x7d,
		0x57, 0x0d, 0xc0, 0xb7, 0x89, 0x2c, 0xfc, 0x5c,
		0xac, 0xb8, 0x24, 0x17, 0xe9, 0x4d, 0x36, 0x29,
		0x04, 0x0e, 0x6a, 0xd1, 0xb4, 0x2d, 0x1a, 0x55,
		0xb9, 0x24, 0x29, 0x23, 0x7e, 0x5b, 0xc9, 0xe6,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake2Message_shouldSerializeCorrectly(c *C) {
	d2 := &dake2Message{}
	d2.instanceTag = 0x4253112B
	d2.serverIdentity = []byte("prekey1.example.org")
	serverKey := gotrax.DeriveKeypair([symKeyLength]byte{0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25})
	d2.serverKey = serverKey.Pub.K()
	d2.s = generatePointFrom([symKeyLength]byte{0x41, 0x12, 0xAC, 0xDF, 0xBD, 0xBF, 0xFE})
	d2.sigma = &gotrax.RingSignature{
		C1: generateScalarFrom(0x01, 0x42, 0x12, 0xAB, 0xFC),
		R1: generateScalarFrom(0x01, 0x42, 0x12, 0xAB, 0xFD),
		C2: generateScalarFrom(0x02, 0x42, 0x15, 0xAB, 0xFC),
		R2: generateScalarFrom(0x03, 0x42, 0x16, 0xAC, 0xFD),
		C3: generateScalarFrom(0x04, 0x42, 0x17, 0xAD, 0xFC),
		R3: generateScalarFrom(0x05, 0x42, 0x18, 0xAE, 0xFD),
	}

	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x36,

		// instance tag
		0x42, 0x53, 0x11, 0x2B,

		// prekey server composite identity
		// identity
		0x00, 0x00, 0x00, 0x13,
		0x70, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x31, 0x2e,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
		0x6f, 0x72, 0x67,

		// prekey server composite identity
		// fingerprint
		0x0, 0x10,
		0xaf, 0xde, 0x43, 0x7d, 0x1e, 0x80, 0xf8, 0x1a,
		0xb7, 0xfe, 0x5b, 0x21, 0x8c, 0x59, 0xa5, 0xff,
		0x5d, 0x7, 0xbb, 0xe1, 0xab, 0xe9, 0xc7, 0xaf,
		0xc3, 0x5b, 0x16, 0x54, 0x1c, 0x6a, 0xf2, 0x6c,
		0xc7, 0x6a, 0xa7, 0xba, 0xf5, 0xf0, 0x7e, 0x8b,
		0x26, 0x36, 0xe4, 0xe6, 0x66, 0x6b, 0x9f, 0x96,
		0xbd, 0x47, 0x0, 0xd4, 0xe6, 0x9f, 0x7, 0x9e,
		0x0,

		// s (point)
		0xc0, 0x3f, 0x59, 0xa0, 0xa9, 0x25, 0x30, 0x1f,
		0xcd, 0xf0, 0x56, 0xe3, 0x28, 0x2e, 0x74, 0x39,
		0xec, 0xd9, 0x23, 0x4f, 0x1e, 0x21, 0xd0, 0x34,
		0x8d, 0x5, 0x30, 0x4c, 0xd0, 0xa5, 0x89, 0x6c,
		0x59, 0xd8, 0xb5, 0x9b, 0x47, 0x3b, 0x7, 0x41,
		0x2a, 0x2e, 0xe7, 0xc7, 0x6d, 0x33, 0x42, 0x58,
		0xe1, 0xb5, 0xe8, 0x31, 0x56, 0x7a, 0xf3, 0x57,
		0x80,

		// sigma
		// sigma c1
		0x01, 0x42, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x42, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x42, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x42, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x42, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r3
		0x05, 0x42, 0x18, 0xae, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	c.Assert(d2.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_dake2Message_shouldDeserializeCorrectly(c *C) {
	d2 := &dake2Message{}
	_, ok := d2.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x36,

		// instance tag
		0x42, 0x53, 0x11, 0x2B,

		// prekey server composite identity
		// identity
		0x00, 0x00, 0x00, 0x13,
		0x70, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x31, 0x2e,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
		0x6f, 0x72, 0x67,

		// prekey server composite identity
		// public key
		0x0, 0x10,
		0xaf, 0xde, 0x43, 0x7d, 0x1e, 0x80, 0xf8, 0x1a,
		0xb7, 0xfe, 0x5b, 0x21, 0x8c, 0x59, 0xa5, 0xff,
		0x5d, 0x7, 0xbb, 0xe1, 0xab, 0xe9, 0xc7, 0xaf,
		0xc3, 0x5b, 0x16, 0x54, 0x1c, 0x6a, 0xf2, 0x6c,
		0xc7, 0x6a, 0xa7, 0xba, 0xf5, 0xf0, 0x7e, 0x8b,
		0x26, 0x36, 0xe4, 0xe6, 0x66, 0x6b, 0x9f, 0x96,
		0xbd, 0x47, 0x0, 0xd4, 0xe6, 0x9f, 0x7, 0x9e,
		0x0,

		// s (point)
		0xc0, 0x3f, 0x59, 0xa0, 0xa9, 0x25, 0x30, 0x1f,
		0xcd, 0xf0, 0x56, 0xe3, 0x28, 0x2e, 0x74, 0x39,
		0xec, 0xd9, 0x23, 0x4f, 0x1e, 0x21, 0xd0, 0x34,
		0x8d, 0x5, 0x30, 0x4c, 0xd0, 0xa5, 0x89, 0x6c,
		0x59, 0xd8, 0xb5, 0x9b, 0x47, 0x3b, 0x7, 0x41,
		0x2a, 0x2e, 0xe7, 0xc7, 0x6d, 0x33, 0x42, 0x58,
		0xe1, 0xb5, 0xe8, 0x31, 0x56, 0x7a, 0xf3, 0x57,
		0x80,

		// sigma
		// sigma c1
		0x01, 0x42, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x42, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x42, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x42, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x42, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r3
		0x05, 0x42, 0x18, 0xae, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, true)
	c.Assert(d2.instanceTag, Equals, uint32(0x4253112B))
	c.Assert(d2.serverIdentity, DeepEquals, []byte("prekey1.example.org"))
	c.Assert(gotrax.SerializePoint(d2.serverKey), DeepEquals, []byte{
		0xaf, 0xde, 0x43, 0x7d, 0x1e, 0x80, 0xf8, 0x1a,
		0xb7, 0xfe, 0x5b, 0x21, 0x8c, 0x59, 0xa5, 0xff,
		0x5d, 0x7, 0xbb, 0xe1, 0xab, 0xe9, 0xc7, 0xaf,
		0xc3, 0x5b, 0x16, 0x54, 0x1c, 0x6a, 0xf2, 0x6c,
		0xc7, 0x6a, 0xa7, 0xba, 0xf5, 0xf0, 0x7e, 0x8b,
		0x26, 0x36, 0xe4, 0xe6, 0x66, 0x6b, 0x9f, 0x96,
		0xbd, 0x47, 0x0, 0xd4, 0xe6, 0x9f, 0x7, 0x9e,
		0x0,
	})
	c.Assert(d2.s.Equals(generatePointFrom([symKeyLength]byte{0x41, 0x12, 0xAC, 0xDF, 0xBD, 0xBF, 0xFE})), Equals, true)
	c.Assert(d2.sigma.C1, DeepEquals, generateScalarFrom(0x01, 0x42, 0x12, 0xAB, 0xFC))
	c.Assert(d2.sigma.R1, DeepEquals, generateScalarFrom(0x01, 0x42, 0x12, 0xAB, 0xFD))
	c.Assert(d2.sigma.C2, DeepEquals, generateScalarFrom(0x02, 0x42, 0x15, 0xAB, 0xFC))
	c.Assert(d2.sigma.R2, DeepEquals, generateScalarFrom(0x03, 0x42, 0x16, 0xAC, 0xFD))
	c.Assert(d2.sigma.C3, DeepEquals, generateScalarFrom(0x04, 0x42, 0x17, 0xAD, 0xFC))
	c.Assert(d2.sigma.R3, DeepEquals, generateScalarFrom(0x05, 0x42, 0x18, 0xAE, 0xFD))
}

func (s *GenericServerSuite) Test_dake3Message_shouldSerializeCorrectly(c *C) {
	d3 := &dake3Message{}
	d3.instanceTag = 0x4253112C
	d3.sigma = &gotrax.RingSignature{
		C1: generateScalarFrom(0x01, 0x43, 0x12, 0xAB, 0xFC),
		R1: generateScalarFrom(0x01, 0x43, 0x12, 0xAB, 0xFD),
		C2: generateScalarFrom(0x02, 0x43, 0x15, 0xAB, 0xFC),
		R2: generateScalarFrom(0x03, 0x43, 0x16, 0xAC, 0xFD),
		C3: generateScalarFrom(0x04, 0x43, 0x17, 0xAD, 0xFC),
		R3: generateScalarFrom(0x05, 0x43, 0x18, 0xAE, 0xFD),
	}
	d3.message = []byte{0xAB, 0xCD, 0xFE, 0x01, 0x02, 0x03}

	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x37,

		// instance tag
		0x42, 0x53, 0x11, 0x2C,

		// sigma
		// sigma c1
		0x01, 0x43, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x43, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x43, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x43, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x43, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r3
		0x05, 0x43, 0x18, 0xae, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// message
		0x00, 0x00, 0x00, 0x06, 0xAB, 0xCD, 0xFE, 0x01,
		0x02, 0x03,
	}

	c.Assert(d3.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_dake3Message_shouldDeserializeCorrectly(c *C) {
	d3 := &dake3Message{}
	_, ok := d3.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x37,

		// instance tag
		0x42, 0x53, 0x11, 0x2C,

		// sigma
		// sigma c1
		0x01, 0x43, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x43, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x43, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x43, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x43, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r3
		0x05, 0x43, 0x18, 0xae, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// message
		0x00, 0x00, 0x00, 0x06, 0xAB, 0xCD, 0xFE, 0x01,
		0x02, 0x03,
	})

	c.Assert(ok, Equals, true)
	c.Assert(d3.instanceTag, Equals, uint32(0x4253112C))
	c.Assert(d3.sigma.C1, DeepEquals, generateScalarFrom(0x01, 0x43, 0x12, 0xAB, 0xFC))
	c.Assert(d3.sigma.R1, DeepEquals, generateScalarFrom(0x01, 0x43, 0x12, 0xAB, 0xFD))
	c.Assert(d3.sigma.C2, DeepEquals, generateScalarFrom(0x02, 0x43, 0x15, 0xAB, 0xFC))
	c.Assert(d3.sigma.R2, DeepEquals, generateScalarFrom(0x03, 0x43, 0x16, 0xAC, 0xFD))
	c.Assert(d3.sigma.C3, DeepEquals, generateScalarFrom(0x04, 0x43, 0x17, 0xAD, 0xFC))
	c.Assert(d3.sigma.R3, DeepEquals, generateScalarFrom(0x05, 0x43, 0x18, 0xAE, 0xFD))
	c.Assert(d3.message, DeepEquals, []byte{0xAB, 0xCD, 0xFE, 0x01, 0x02, 0x03})
}

func (s *GenericServerSuite) Test_dake2Message_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	d := &dake2Message{}
	_, ok := d.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = d.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake2Message_deserialize_shouldFailIfVersionIsIncorrect(c *C) {
	d := &dake2Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x36,

		// instance tag
		0x42, 0x53, 0x11, 0x2B,

		// prekey server composite identity
		// identity
		0x00, 0x00, 0x00, 0x13,
		0x70, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x31, 0x2e,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
		0x6f, 0x72, 0x67,

		// prekey server composite identity
		// public key
		0x0, 0x10,
		0xaf, 0xde, 0x43, 0x7d, 0x1e, 0x80, 0xf8, 0x1a,
		0xb7, 0xfe, 0x5b, 0x21, 0x8c, 0x59, 0xa5, 0xff,
		0x5d, 0x7, 0xbb, 0xe1, 0xab, 0xe9, 0xc7, 0xaf,
		0xc3, 0x5b, 0x16, 0x54, 0x1c, 0x6a, 0xf2, 0x6c,
		0xc7, 0x6a, 0xa7, 0xba, 0xf5, 0xf0, 0x7e, 0x8b,
		0x26, 0x36, 0xe4, 0xe6, 0x66, 0x6b, 0x9f, 0x96,
		0xbd, 0x47, 0x0, 0xd4, 0xe6, 0x9f, 0x7, 0x9e,
		0x0,

		// s (point)
		0xd1, 0xad, 0xbe, 0x3a, 0xdd, 0x60, 0xc4, 0xbf,
		0xe0, 0xd8, 0x02, 0x85, 0x5b, 0x60, 0x6c, 0x3d,
		0xc3, 0x0a, 0x18, 0x6c, 0x77, 0xdc, 0xf8, 0x15,
		0xa0, 0x3b, 0x28, 0x20, 0x3c, 0xde, 0x5e, 0xa8,
		0x86, 0xf2, 0xa0, 0x93, 0xfa, 0xbd, 0x46, 0xd6,
		0x29, 0xef, 0x85, 0x4e, 0xfd, 0x5b, 0x3e, 0xa6,
		0x96, 0xeb, 0x17, 0x4f, 0x0a, 0xdb, 0x30, 0xf0,
		0x80,

		// sigma
		// sigma c1
		0x01, 0x42, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x42, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x42, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x42, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x42, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r3
		0x05, 0x42, 0x18, 0xae, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake2Message_deserialize_shouldFailIfNotLongEnoughForMessageType(c *C) {
	d := &dake2Message{}
	_, ok := d.deserialize([]byte{
		0x00, 0x04,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake2Message_deserialize_shouldFailIfMessageTypeIsIncorrect(c *C) {
	d := &dake2Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// instance tag
		0x42, 0x53, 0x11, 0x2B,

		// prekey server composite identity
		// identity
		0x00, 0x00, 0x00, 0x13,
		0x70, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x31, 0x2e,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
		0x6f, 0x72, 0x67,

		// prekey server composite identity
		// public key
		0x0, 0x10,
		0xaf, 0xde, 0x43, 0x7d, 0x1e, 0x80, 0xf8, 0x1a,
		0xb7, 0xfe, 0x5b, 0x21, 0x8c, 0x59, 0xa5, 0xff,
		0x5d, 0x7, 0xbb, 0xe1, 0xab, 0xe9, 0xc7, 0xaf,
		0xc3, 0x5b, 0x16, 0x54, 0x1c, 0x6a, 0xf2, 0x6c,
		0xc7, 0x6a, 0xa7, 0xba, 0xf5, 0xf0, 0x7e, 0x8b,
		0x26, 0x36, 0xe4, 0xe6, 0x66, 0x6b, 0x9f, 0x96,
		0xbd, 0x47, 0x0, 0xd4, 0xe6, 0x9f, 0x7, 0x9e,
		0x0,

		// s (point)
		0xd1, 0xad, 0xbe, 0x3a, 0xdd, 0x60, 0xc4, 0xbf,
		0xe0, 0xd8, 0x02, 0x85, 0x5b, 0x60, 0x6c, 0x3d,
		0xc3, 0x0a, 0x18, 0x6c, 0x77, 0xdc, 0xf8, 0x15,
		0xa0, 0x3b, 0x28, 0x20, 0x3c, 0xde, 0x5e, 0xa8,
		0x86, 0xf2, 0xa0, 0x93, 0xfa, 0xbd, 0x46, 0xd6,
		0x29, 0xef, 0x85, 0x4e, 0xfd, 0x5b, 0x3e, 0xa6,
		0x96, 0xeb, 0x17, 0x4f, 0x0a, 0xdb, 0x30, 0xf0,
		0x80,

		// sigma
		// sigma c1
		0x01, 0x42, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x42, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x42, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x42, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x42, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r3
		0x05, 0x42, 0x18, 0xae, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake2Message_deserialize_shouldFailOnInstanceTag(c *C) {
	d := &dake2Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x36,

		// instance tag
		0x42, 0x53,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake2Message_deserialize_shouldFailOnServerIdentity(c *C) {
	d := &dake2Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x36,

		// instance tag
		0x42, 0x53, 0x11, 0x2B,

		// prekey server composite identity
		// identity
		0x00, 0x00, 0x00, 0x13,
		0x70, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x31, 0x2e,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake2Message_deserialize_shouldFailOnServerKey(c *C) {
	d := &dake2Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x36,

		// instance tag
		0x42, 0x53, 0x11, 0x2B,

		// prekey server composite identity
		// identity
		0x00, 0x00, 0x00, 0x13,
		0x70, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x31, 0x2e,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
		0x6f, 0x72, 0x67,

		// prekey server composite identity
		// key
		0x00, 0x00, 0x00, 0x38,
		0x13, 0x14, 0x15, 0xab, 0xcc, 0xac, 0xdc, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake2Message_deserialize_shouldFailOnS(c *C) {
	d := &dake2Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x36,

		// instance tag
		0x42, 0x53, 0x11, 0x2B,

		// prekey server composite identity
		// identity
		0x00, 0x00, 0x00, 0x13,
		0x70, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x31, 0x2e,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
		0x6f, 0x72, 0x67,

		// prekey server composite identity
		// public key
		0x0, 0x10,
		0xaf, 0xde, 0x43, 0x7d, 0x1e, 0x80, 0xf8, 0x1a,
		0xb7, 0xfe, 0x5b, 0x21, 0x8c, 0x59, 0xa5, 0xff,
		0x5d, 0x7, 0xbb, 0xe1, 0xab, 0xe9, 0xc7, 0xaf,
		0xc3, 0x5b, 0x16, 0x54, 0x1c, 0x6a, 0xf2, 0x6c,
		0xc7, 0x6a, 0xa7, 0xba, 0xf5, 0xf0, 0x7e, 0x8b,
		0x26, 0x36, 0xe4, 0xe6, 0x66, 0x6b, 0x9f, 0x96,
		0xbd, 0x47, 0x0, 0xd4, 0xe6, 0x9f, 0x7, 0x9e,
		0x0,

		// s (point)
		0xd1, 0xad, 0xbe, 0x3a, 0xdd, 0x60, 0xc4, 0xbf,
		0xe0, 0xd8, 0x02, 0x85, 0x5b, 0x60, 0x6c, 0x3d,
		0xc3, 0x0a, 0x18, 0x6c, 0x77, 0xdc, 0xf8, 0x15,
		0xa0, 0x3b, 0x28, 0x20, 0x3c, 0xde, 0x5e, 0xa8,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake2Message_deserialize_shouldFailOnRingSignature(c *C) {
	d := &dake2Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x36,

		// instance tag
		0x42, 0x53, 0x11, 0x2B,

		// prekey server composite identity
		// identity
		0x00, 0x00, 0x00, 0x13,
		0x70, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x31, 0x2e,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
		0x6f, 0x72, 0x67,

		// prekey server composite identity
		// public key
		0x0, 0x10,
		0xaf, 0xde, 0x43, 0x7d, 0x1e, 0x80, 0xf8, 0x1a,
		0xb7, 0xfe, 0x5b, 0x21, 0x8c, 0x59, 0xa5, 0xff,
		0x5d, 0x7, 0xbb, 0xe1, 0xab, 0xe9, 0xc7, 0xaf,
		0xc3, 0x5b, 0x16, 0x54, 0x1c, 0x6a, 0xf2, 0x6c,
		0xc7, 0x6a, 0xa7, 0xba, 0xf5, 0xf0, 0x7e, 0x8b,
		0x26, 0x36, 0xe4, 0xe6, 0x66, 0x6b, 0x9f, 0x96,
		0xbd, 0x47, 0x0, 0xd4, 0xe6, 0x9f, 0x7, 0x9e,
		0x0,

		// s (point)
		0xd1, 0xad, 0xbe, 0x3a, 0xdd, 0x60, 0xc4, 0xbf,
		0xe0, 0xd8, 0x02, 0x85, 0x5b, 0x60, 0x6c, 0x3d,
		0xc3, 0x0a, 0x18, 0x6c, 0x77, 0xdc, 0xf8, 0x15,
		0xa0, 0x3b, 0x28, 0x20, 0x3c, 0xde, 0x5e, 0xa8,
		0x86, 0xf2, 0xa0, 0x93, 0xfa, 0xbd, 0x46, 0xd6,
		0x29, 0xef, 0x85, 0x4e, 0xfd, 0x5b, 0x3e, 0xa6,
		0x96, 0xeb, 0x17, 0x4f, 0x0a, 0xdb, 0x30, 0xf0,
		0x80,

		// sigma
		// sigma c1
		0x01, 0x42, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake3Message_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	d := &dake3Message{}
	_, ok := d.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = d.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake3Message_deserialize_shouldFailIfVersionIsIncorrect(c *C) {
	d := &dake3Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x37,

		// instance tag
		0x42, 0x53, 0x11, 0x2C,

		// sigma
		// sigma c1
		0x01, 0x43, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x43, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x43, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x43, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x43, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r3
		0x05, 0x43, 0x18, 0xae, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// message
		0x00, 0x00, 0x00, 0x06, 0xAB, 0xCD, 0xFE, 0x01,
		0x02, 0x03,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake3Message_deserialize_shouldFailIfNotLongEnoughForMessageType(c *C) {
	d := &dake3Message{}
	_, ok := d.deserialize([]byte{
		0x00, 0x04,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake3Message_deserialize_shouldFailIfMessageTypeIsIncorrect(c *C) {
	d := &dake3Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// instance tag
		0x42, 0x53, 0x11, 0x2C,

		// sigma
		// sigma c1
		0x01, 0x43, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x43, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x43, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x43, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x43, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r3
		0x05, 0x43, 0x18, 0xae, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// message
		0x00, 0x00, 0x00, 0x06, 0xAB, 0xCD, 0xFE, 0x01,
		0x02, 0x03,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake3Message_deserialize_shouldFailOnInstanceTag(c *C) {
	d := &dake3Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x37,

		// instance tag
		0x42, 0x53,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake3Message_deserialize_shouldFailOnSigma(c *C) {
	d := &dake3Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x37,

		// instance tag
		0x42, 0x53, 0x11, 0x2C,

		// sigma
		// sigma c1
		0x01, 0x43, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x43, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x43, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x43, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x43, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_dake3Message_deserialize_shouldFailOnMessage(c *C) {
	d := &dake3Message{}
	_, ok := d.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x37,

		// instance tag
		0x42, 0x53, 0x11, 0x2C,

		// sigma
		// sigma c1
		0x01, 0x43, 0x12, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r1
		0x01, 0x43, 0x12, 0xab, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c2
		0x02, 0x43, 0x15, 0xab, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r2
		0x03, 0x43, 0x16, 0xac, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma c3
		0x04, 0x43, 0x17, 0xad, 0xfc, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// sigma r3
		0x05, 0x43, 0x18, 0xae, 0xfd, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// message
		0x00, 0x00, 0x00, 0x06, 0xAB, 0xCD, 0xFE, 0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_noPrekeyEnsemblesMessage_shouldSerializeCorrectly(c *C) {
	m := &noPrekeyEnsemblesMessage{}
	m.instanceTag = 0x4253112D
	m.message = "no prekeys, sorry very sorry"
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x0E,

		// instance tag
		0x42, 0x53, 0x11, 0x2D,

		// message
		0x00, 0x00, 0x00, 0x1C, 0x6E, 0x6F, 0x20, 0x70,
		0x72, 0x65, 0x6B, 0x65, 0x79, 0x73, 0x2C, 0x20,
		0x73, 0x6F, 0x72, 0x72, 0x79, 0x20, 0x76, 0x65,
		0x72, 0x79, 0x20, 0x73, 0x6F, 0x72, 0x72, 0x79,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_noPrekeyEnsemblesMessage_shouldDeserializeCorrectly(c *C) {
	m := &noPrekeyEnsemblesMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0E,

		// instance tag
		0x42, 0x53, 0x11, 0x2D,

		// message
		0x00, 0x00, 0x00, 0x1C, 0x6E, 0x6F, 0x20, 0x70,
		0x72, 0x65, 0x6B, 0x65, 0x79, 0x73, 0x2C, 0x20,
		0x73, 0x6F, 0x72, 0x72, 0x79, 0x20, 0x76, 0x65,
		0x72, 0x79, 0x20, 0x73, 0x6F, 0x72, 0x72, 0x79,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4253112D))
	c.Assert(m.message, DeepEquals, "no prekeys, sorry very sorry")
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_shouldSerializeCorrectly(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	m.instanceTag = 0x4253112E
	m.identity = "foobar@blarg.com/foo"
	m.versions = []byte{0x05, 0x42}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x10,

		// instance tag
		0x42, 0x53, 0x11, 0x2E,

		// identity
		0x00, 0x00, 0x00, 0x14, 0x66, 0x6f, 0x6f, 0x62,
		0x61, 0x72, 0x40, 0x62, 0x6c, 0x61, 0x72, 0x67,
		0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x6f,

		// versions
		0x00, 0x00, 0x00, 0x02,
		0x05, 0x42,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_shouldDeserializeCorrectly(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x10,

		// instance tag
		0x42, 0x53, 0x11, 0x2E,

		// identity
		0x00, 0x00, 0x00, 0x14, 0x66, 0x6f, 0x6f, 0x62,
		0x61, 0x72, 0x40, 0x62, 0x6c, 0x61, 0x72, 0x67,
		0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x6f,

		// versions
		0x00, 0x00, 0x00, 0x02,
		0x05, 0x42,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4253112E))
	c.Assert(m.identity, DeepEquals, "foobar@blarg.com/foo")
	c.Assert(m.versions, DeepEquals, []byte{0x05, 0x42})
}

func (s *GenericServerSuite) Test_successMessage_shouldSerializeCorrectly(c *C) {
	m := &successMessage{}
	m.instanceTag = 0x4254112E
	m.mac = [macLength]byte{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x06,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_successMessage_shouldDeserializeCorrectly(c *C) {
	m := &successMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x06,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4254112E))
	c.Assert(m.mac[:], DeepEquals, []byte{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_successMessage_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	m := &successMessage{}
	_, ok := m.deserialize([]byte{})
	c.Assert(ok, Equals, false)

	_, ok = m.deserialize([]byte{
		0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_successMessage_deserialize_shouldFailIfVersionIsIncorrect(c *C) {
	m := &successMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x06,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_successMessage_deserialize_shouldFailOnMessageType(c *C) {
	m := &successMessage{}
	_, ok := m.deserialize([]byte{
		0x00, 0x04,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_successMessage_deserialize_shouldFailIfMessageTypeIsIncorrect(c *C) {
	m := &successMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_successMessage_deserialize_shouldFailOnInstanceTag(c *C) {
	m := &successMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x06,

		// instance tag
		0x42, 0x54,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_successMessage_deserialize_shouldFailOnMAC(c *C) {
	m := &successMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x06,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_failureMessage_shouldSerializeCorrectly(c *C) {
	m := &failureMessage{}
	m.instanceTag = 0x4264112E
	m.mac = [macLength]byte{
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x05,

		// instance tag
		0x42, 0x64, 0x11, 0x2E,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_failureMessage_shouldDeserializeCorrectly(c *C) {
	m := &failureMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x05,

		// instance tag
		0x42, 0x74, 0x11, 0x2E,

		// MAC
		0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4274112E))
	c.Assert(m.mac[:], DeepEquals, []byte{
		0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_failureMessage_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	m := &failureMessage{}
	_, ok := m.deserialize([]byte{})
	c.Assert(ok, Equals, false)

	_, ok = m.deserialize([]byte{
		0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_failureMessage_deserialize_shouldFailIfVersionIsIncorrect(c *C) {
	m := &failureMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x05,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_failureMessage_deserialize_shouldFailOnMessageType(c *C) {
	m := &failureMessage{}
	_, ok := m.deserialize([]byte{
		0x00, 0x04,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_failureMessage_deserialize_shouldFailIfMessageTypeIsIncorrect(c *C) {
	m := &failureMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_failureMessage_deserialize_shouldFailOnInstanceTag(c *C) {
	m := &failureMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x05,

		// instance tag
		0x42, 0x54,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_failureMessage_deserialize_shouldFailOnMAC(c *C) {
	m := &failureMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x05,

		// instance tag
		0x42, 0x54, 0x11, 0x2E,

		// MAC
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageInformationRequestMessage_shouldSerializeCorrectly(c *C) {
	m := &storageInformationRequestMessage{}
	m.mac = [macLength]byte{
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x09,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_storageInformationRequestMessage_shouldDeserializeCorrectly(c *C) {
	m := &storageInformationRequestMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x09,

		// MAC
		0x01, 0x03, 0x03, 0x04, 0x05, 0x09, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.mac[:], DeepEquals, []byte{
		0x01, 0x03, 0x03, 0x04, 0x05, 0x09, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_storageStatusMessage_shouldSerializeCorrectly(c *C) {
	m := &storageStatusMessage{}
	m.instanceTag = 0x4264212E
	m.number = 0x1234ABC0
	m.mac = [macLength]byte{
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x0B,

		// instance tag
		0x42, 0x64, 0x21, 0x2E,

		// number
		0x12, 0x34, 0xAB, 0xC0,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_storageStatusMessage_shouldDeserializeCorrectly(c *C) {
	m := &storageStatusMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0B,

		// instance tag
		0x42, 0x74, 0x23, 0x2E,

		// number
		0x13, 0x34, 0xAB, 0xC0,

		// MAC
		0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x4274232E))
	c.Assert(m.number, Equals, uint32(0x1334ABC0))
	c.Assert(m.mac[:], DeepEquals, []byte{
		0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_publicationMessage_shouldSerializeCorrectly_withJustPrekeyMessages(c *C) {
	m := &publicationMessage{}
	m.clientProfile = nil
	m.prekeyProfile = nil

	pm1 := &prekeyMessage{}
	pm1.identifier = 0x4264212E
	pm1.instanceTag = 0x1234ABC0
	pm1.y = generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()
	pm1.b = new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F})

	pm2 := &prekeyMessage{}
	pm2.identifier = 0x4264212F
	pm2.instanceTag = 0x1234ABC0
	pm2.y = generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()
	pm2.b = new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x1C})

	m.prekeyMessages = []*prekeyMessage{
		pm1,
		pm2,
	}

	m.mac = [macLength]byte{
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x02,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// prekey message 2
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x1C,

		// K
		0x00,

		// J
		0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_publicationMessage_shouldSerializeCorrectly_withAllThreeTypes(c *C) {
	m := &publicationMessage{}

	cp := &gotrax.ClientProfile{}
	cp.InstanceTag = 0x4253112A
	cp.PublicKey = generatePublicKeyFrom([symKeyLength]byte{0xAB, 0x42})
	cp.PublicKey = gotrax.CreatePublicKey(cp.PublicKey.K(), gotrax.Ed448Key)
	cp.ForgingKey = gotrax.CreatePublicKey(generatePublicKeyFrom([symKeyLength]byte{0xCD, 0x53}).K(), gotrax.ForgingKey)
	cp.Versions = []byte{0x04}
	cp.Expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	cp.DsaKey = nil
	cp.TransitionalSignature = nil
	cp.Sig = gotrax.CreateEddsaSignature([114]byte{0x15, 0x00, 0x00, 0x00, 0x12})
	m.clientProfile = cp

	pp := &prekeyProfile{}
	pp.instanceTag = 0x1234ABC1
	pp.expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	pp.sharedPrekey = generatePublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF})
	pp.sharedPrekey = gotrax.CreatePublicKey(pp.sharedPrekey.K(), gotrax.SharedPrekeyKey)
	pp.sig = gotrax.CreateEddsaSignature([114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11})
	m.prekeyProfile = pp

	pm1 := &prekeyMessage{}
	pm1.identifier = 0x4264212E
	pm1.instanceTag = 0x1234ABC0
	pm1.y = generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()
	pm1.b = new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F})

	m.prekeyMessages = []*prekeyMessage{
		pm1,
	}

	m.mac = [macLength]byte{
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x01,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// K
		0x01,

		// - Client profile
		0x0, 0x0, 0x0, 0x5,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// forging key
		0x00, 0x03, 0x00, 0x12,
		0x07, 0x98, 0xea, 0x0b, 0x4a, 0x8c, 0x23, 0x1d,
		0x7a, 0x5b, 0x6e, 0x13, 0x98, 0x11, 0xf1, 0x78,
		0xa5, 0x67, 0xca, 0x6c, 0x8b, 0xf9, 0xd9, 0xfb,
		0xf4, 0x5b, 0x91, 0x45, 0x2d, 0xbf, 0x3f, 0x91,
		0xae, 0xb4, 0x64, 0xb4, 0xab, 0x98, 0x3a, 0x3f,
		0x51, 0x3b, 0x62, 0xdf, 0x91, 0x82, 0x2a, 0x39,
		0x77, 0x9d, 0x9b, 0xcf, 0x02, 0x9a, 0xcc, 0x2c,
		0x80,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// J
		0x01,

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_publicationMessage_shouldDeserializeCorrectly_withJustPrekeyMessages(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x02,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// prekey message 2
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x1C,

		// K
		0x00,

		// J
		0x00,

		// prekey messages ecdh proof
		//   c
		0x42, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0xff, 0xff, 0xf1, 0xd0, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// prekey messages dh proof
		//   c
		0x43, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0x00, 0x00, 0x00, 0x05, 0xf0, 0xff, 0xf1, 0xd0,
		0x01,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)

	c.Assert(m.clientProfile, IsNil)

	c.Assert(m.prekeyProfile, IsNil)

	c.Assert(len(m.prekeyMessages), Equals, 2)
	c.Assert(m.prekeyMessages[0].identifier, Equals, uint32(0x4264212E))
	c.Assert(m.prekeyMessages[0].instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.prekeyMessages[0].y.Equals(generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.prekeyMessages[0].b, DeepEquals, new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F}))

	c.Assert(m.prekeyMessages[1].identifier, Equals, uint32(0x4264212F))
	c.Assert(m.prekeyMessages[1].instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.prekeyMessages[1].y.Equals(generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.prekeyMessages[1].b, DeepEquals, new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x1C}))

	c.Assert(m.prekeyMessageProofEcdh, Not(IsNil))
	c.Assert(m.prekeyMessageProofEcdh.c[0:5], DeepEquals, []byte{0x42, 0x01, 0x00, 0x02, 0x00})
	c.Assert(m.prekeyMessageProofEcdh.v.Equals(ed448.NewScalar([]byte{0xFF, 0xFF, 0xF1, 0xD0, 0x01})), Equals, true)

	c.Assert(m.prekeyMessageProofDh, Not(IsNil))
	c.Assert(m.prekeyMessageProofDh.c[0:5], DeepEquals, []byte{0x43, 0x01, 0x00, 0x02, 0x00})
	c.Assert(m.prekeyMessageProofDh.v.Cmp(new(big.Int).SetBytes([]byte{0xF0, 0xFF, 0xF1, 0xD0, 0x01})), Equals, 0)

	c.Assert(m.prekeyProfileProofEcdh, IsNil)

	c.Assert(m.mac[:], DeepEquals, []byte{
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_publicationMessage_shouldDeserializeCorrectly_withClientProfilesAndPrekeyProfilesAndMessages(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x01,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// K
		0x01,

		// - Client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// J
		0x01,

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// prekey messages ecdh proof
		//   c
		0x42, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0xff, 0xff, 0xf1, 0xd0, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// prekey messages dh proof
		//   c
		0x43, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0x00, 0x00, 0x00, 0x05, 0xf0, 0xff, 0xf1, 0xd0,
		0x01,

		// prekey profile ecdh proof
		//   c
		0x43, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0xfd, 0xff, 0xf1, 0xd0, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})
	c.Assert(ok, Equals, true)

	c.Assert(m.clientProfile, Not(IsNil))
	c.Assert(m.clientProfile.InstanceTag, Equals, uint32(0x4253112A))
	c.Assert(m.clientProfile.PublicKey.K().Equals(generatePublicKeyFrom([symKeyLength]byte{0xAB, 0x42}).K()), Equals, true)
	c.Assert(m.clientProfile.Versions, DeepEquals, []byte{0x04})
	c.Assert(m.clientProfile.Expiration, Equals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.clientProfile.DsaKey, IsNil)
	c.Assert(m.clientProfile.TransitionalSignature, IsNil)
	c.Assert(m.clientProfile.Sig, DeepEquals, gotrax.CreateEddsaSignature([114]byte{0x15, 0x00, 0x00, 0x00, 0x12}))

	c.Assert(m.prekeyProfile, Not(IsNil))
	c.Assert(m.prekeyProfile.instanceTag, Equals, uint32(0x1234ABC1))
	c.Assert(m.prekeyProfile.expiration, DeepEquals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.prekeyProfile.sharedPrekey.K().Equals(generatePublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.prekeyProfile.sig, DeepEquals, gotrax.CreateEddsaSignature([114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11}))

	c.Assert(len(m.prekeyMessages), Equals, 1)
	c.Assert(m.prekeyMessages[0].identifier, Equals, uint32(0x4264212E))
	c.Assert(m.prekeyMessages[0].instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.prekeyMessages[0].y.Equals(generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.prekeyMessages[0].b, DeepEquals, new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F}))

	c.Assert(m.prekeyMessageProofEcdh, Not(IsNil))
	c.Assert(m.prekeyMessageProofEcdh.c[0:5], DeepEquals, []byte{0x42, 0x01, 0x00, 0x02, 0x00})
	c.Assert(m.prekeyMessageProofEcdh.v.Equals(ed448.NewScalar([]byte{0xFF, 0xFF, 0xF1, 0xD0, 0x01})), Equals, true)

	c.Assert(m.prekeyMessageProofDh, Not(IsNil))
	c.Assert(m.prekeyMessageProofDh.c[0:5], DeepEquals, []byte{0x43, 0x01, 0x00, 0x02, 0x00})
	c.Assert(m.prekeyMessageProofDh.v.Cmp(new(big.Int).SetBytes([]byte{0xF0, 0xFF, 0xF1, 0xD0, 0x01})), Equals, 0)

	c.Assert(m.prekeyProfileProofEcdh, Not(IsNil))
	c.Assert(m.prekeyProfileProofEcdh.c[0:5], DeepEquals, []byte{0x43, 0x01, 0x00, 0x02, 0x00})
	c.Assert(m.prekeyProfileProofEcdh.v.Equals(ed448.NewScalar([]byte{0xFD, 0xFF, 0xF1, 0xD0, 0x01})), Equals, true)

	c.Assert(m.mac[:], DeepEquals, []byte{
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_shouldSerializeCorrectly(c *C) {
	m := &ensembleRetrievalMessage{}
	m.instanceTag = 0x1234AABB

	pe := &prekeyEnsemble{}

	pe.cp = &gotrax.ClientProfile{}
	pe.cp.InstanceTag = 0x4253112A
	pe.cp.PublicKey = gotrax.CreatePublicKey(generatePublicKeyFrom([symKeyLength]byte{0xAB, 0x42}).K(), gotrax.Ed448Key)
	pe.cp.ForgingKey = gotrax.CreatePublicKey(generatePublicKeyFrom([symKeyLength]byte{0xCD, 0x53}).K(), gotrax.ForgingKey)
	pe.cp.Versions = []byte{0x04}
	pe.cp.Expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	pe.cp.DsaKey = nil
	pe.cp.TransitionalSignature = nil
	pe.cp.Sig = gotrax.CreateEddsaSignature([114]byte{0x15, 0x00, 0x00, 0x00, 0x12})

	pe.pp = &prekeyProfile{}
	pe.pp.instanceTag = 0x1234ABC1
	pe.pp.expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	pe.pp.sharedPrekey = gotrax.CreatePublicKey(generatePublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K(), gotrax.SharedPrekeyKey)
	pe.pp.sig = gotrax.CreateEddsaSignature([114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11})

	pe.pm = &prekeyMessage{}
	pe.pm.identifier = 0x4264212E
	pe.pm.instanceTag = 0x1234ABC0
	pe.pm.y = generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()
	pe.pm.b = new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F})

	m.ensembles = []*prekeyEnsemble{
		pe,
	}

	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x13,

		// instance tag
		0x12, 0x34, 0xAA, 0xBB,

		// L
		0x01,

		// client profile
		0x0, 0x0, 0x0, 0x5,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// forging key
		0x00, 0x03, 0x00, 0x12,
		0x07, 0x98, 0xea, 0x0b, 0x4a, 0x8c, 0x23, 0x1d,
		0x7a, 0x5b, 0x6e, 0x13, 0x98, 0x11, 0xf1, 0x78,
		0xa5, 0x67, 0xca, 0x6c, 0x8b, 0xf9, 0xd9, 0xfb,
		0xf4, 0x5b, 0x91, 0x45, 0x2d, 0xbf, 0x3f, 0x91,
		0xae, 0xb4, 0x64, 0xb4, 0xab, 0x98, 0x3a, 0x3f,
		0x51, 0x3b, 0x62, 0xdf, 0x91, 0x82, 0x2a, 0x39,
		0x77, 0x9d, 0x9b, 0xcf, 0x02, 0x9a, 0xcc, 0x2c,
		0x80,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// prekey profile
		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// Prekey message
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_shouldDeserializeCorrectly(c *C) {
	m := &ensembleRetrievalMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x13,

		// instance tag
		0x12, 0x34, 0xAA, 0xBB,

		// L
		0x01,

		// client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// prekey profile
		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// Prekey message
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})

	c.Assert(ok, Equals, true)

	c.Assert(len(m.ensembles), Equals, 1)
	c.Assert(m.ensembles[0].cp, Not(IsNil))
	c.Assert(m.ensembles[0].cp.InstanceTag, Equals, uint32(0x4253112A))
	c.Assert(m.ensembles[0].cp.PublicKey.K().Equals(generatePublicKeyFrom([symKeyLength]byte{0xAB, 0x42}).K()), Equals, true)
	c.Assert(m.ensembles[0].cp.Versions, DeepEquals, []byte{0x04})
	c.Assert(m.ensembles[0].cp.Expiration, Equals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.ensembles[0].cp.DsaKey, IsNil)
	c.Assert(m.ensembles[0].cp.TransitionalSignature, IsNil)
	c.Assert(m.ensembles[0].cp.Sig, DeepEquals, gotrax.CreateEddsaSignature([114]byte{0x15, 0x00, 0x00, 0x00, 0x12}))

	c.Assert(m.ensembles[0].pp.instanceTag, Equals, uint32(0x1234ABC1))
	c.Assert(m.ensembles[0].pp.expiration, DeepEquals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.ensembles[0].pp.sharedPrekey.K().Equals(generatePublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.ensembles[0].pp.sig, DeepEquals, gotrax.CreateEddsaSignature([114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11}))

	c.Assert(m.ensembles[0].pm.identifier, Equals, uint32(0x4264212E))
	c.Assert(m.ensembles[0].pm.instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.ensembles[0].pm.y.Equals(generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.ensembles[0].pm.b, DeepEquals, new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F}))
}

func (s *GenericServerSuite) Test_serializeVersions_shouldSerializeCorrectly(c *C) {
	v := []byte{0x04, 0x03}

	expected := []byte{0x00, 0x00, 0x00, 0x02, 0x04, 0x03}

	c.Assert(serializeVersions(v), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_serializeExpiry_shouldSerializeCorrectly(c *C) {
	t := time.Date(2034, 11, 5, 13, 46, 20, 12, time.UTC)

	expected := []byte{0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0xac}

	c.Assert(serializeExpiry(t), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_prekeyMessage_shouldSerializeCorrectly(c *C) {
	m := &prekeyMessage{}
	m.identifier = 0x4264212E
	m.instanceTag = 0x1234ABC0
	m.y = generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()
	m.b = new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F})
	expected := []byte{
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_prekeyMessage_shouldDeserializeCorrectly(c *C) {
	m := &prekeyMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.identifier, Equals, uint32(0x4264212E))
	c.Assert(m.instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.y.Equals(generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.b, DeepEquals, new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F}))
}

func (s *GenericServerSuite) Test_prekeyProfile_shouldSerializeCorrectly(c *C) {
	m := &prekeyProfile{}
	m.instanceTag = 0x1234ABC1
	m.expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	m.sharedPrekey = gotrax.CreatePublicKey(generatePublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K(), gotrax.SharedPrekeyKey)
	m.sig = gotrax.CreateEddsaSignature([114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11})

	expected := []byte{
		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_prekeyProfile_shouldDeserializeCorrectly(c *C) {
	m := &prekeyProfile{}
	_, ok := m.deserialize([]byte{
		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
	})
	c.Assert(ok, Equals, true)
	c.Assert(m.instanceTag, Equals, uint32(0x1234ABC1))
	c.Assert(m.expiration, DeepEquals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.sharedPrekey.K().Equals(generatePublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.sig, DeepEquals, gotrax.CreateEddsaSignature([114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11}))
}

func (s *GenericServerSuite) Test_prekeyEnsemble_shouldSerializeCorrectly(c *C) {
	m := &prekeyEnsemble{}
	cp := &gotrax.ClientProfile{}
	cp.InstanceTag = 0x4253112A
	cp.PublicKey = gotrax.CreatePublicKey(generatePublicKeyFrom([symKeyLength]byte{0xAB, 0x42}).K(), gotrax.Ed448Key)
	cp.ForgingKey = gotrax.CreatePublicKey(generatePublicKeyFrom([symKeyLength]byte{0xCD, 0x53}).K(), gotrax.ForgingKey)
	cp.Versions = []byte{0x04}
	cp.Expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	cp.DsaKey = nil
	cp.TransitionalSignature = nil
	cp.Sig = gotrax.CreateEddsaSignature([114]byte{0x15, 0x00, 0x00, 0x00, 0x12})
	m.cp = cp

	pp := &prekeyProfile{}
	pp.instanceTag = 0x1234ABC1
	pp.expiration = time.Date(2034, 11, 5, 13, 46, 00, 12, time.UTC)
	pp.sharedPrekey = gotrax.CreatePublicKey(generatePublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K(), gotrax.SharedPrekeyKey)
	pp.sig = gotrax.CreateEddsaSignature([114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11})
	m.pp = pp

	pm := &prekeyMessage{}
	pm.identifier = 0x4264212E
	pm.instanceTag = 0x1234ABC0
	pm.y = generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()
	pm.b = new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F})
	m.pm = pm

	expected := []byte{
		// - client profile

		0x0, 0x0, 0x0, 0x5,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// forging key
		0x00, 0x03, 0x00, 0x12,
		0x07, 0x98, 0xea, 0x0b, 0x4a, 0x8c, 0x23, 0x1d,
		0x7a, 0x5b, 0x6e, 0x13, 0x98, 0x11, 0xf1, 0x78,
		0xa5, 0x67, 0xca, 0x6c, 0x8b, 0xf9, 0xd9, 0xfb,
		0xf4, 0x5b, 0x91, 0x45, 0x2d, 0xbf, 0x3f, 0x91,
		0xae, 0xb4, 0x64, 0xb4, 0xab, 0x98, 0x3a, 0x3f,
		0x51, 0x3b, 0x62, 0xdf, 0x91, 0x82, 0x2a, 0x39,
		0x77, 0x9d, 0x9b, 0xcf, 0x02, 0x9a, 0xcc, 0x2c,
		0x80,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// - prekey profile

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// - prekey message

		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	}

	c.Assert(m.serialize(), DeepEquals, expected)
}

func (s *GenericServerSuite) Test_prekeyEnsemble_shouldDeserializeCorrectly(c *C) {
	m := &prekeyEnsemble{}
	_, ok := m.deserialize([]byte{
		// - client profile

		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// - prekey profile

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// - prekey message

		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})

	c.Assert(ok, Equals, true)

	c.Assert(m.cp.InstanceTag, Equals, uint32(0x4253112A))
	c.Assert(m.cp.PublicKey.K().Equals(generatePublicKeyFrom([symKeyLength]byte{0xAB, 0x42}).K()), Equals, true)
	c.Assert(m.cp.Versions, DeepEquals, []byte{0x04})
	c.Assert(m.cp.Expiration, Equals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.cp.DsaKey, IsNil)
	c.Assert(m.cp.TransitionalSignature, IsNil)
	c.Assert(m.cp.Sig, DeepEquals, gotrax.CreateEddsaSignature([114]byte{0x15, 0x00, 0x00, 0x00, 0x12}))

	c.Assert(m.pp.instanceTag, Equals, uint32(0x1234ABC1))
	c.Assert(m.pp.expiration, DeepEquals, time.Date(2034, 11, 5, 13, 46, 00, 00, time.UTC))
	c.Assert(m.pp.sharedPrekey.K().Equals(generatePublicKeyFrom([symKeyLength]byte{0x44, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.pp.sig, DeepEquals, gotrax.CreateEddsaSignature([114]byte{0x16, 0x00, 0x00, 0x00, 0x12, 0x11}))

	c.Assert(m.pm.identifier, Equals, uint32(0x4264212E))
	c.Assert(m.pm.instanceTag, Equals, uint32(0x1234ABC0))
	c.Assert(m.pm.y.Equals(generatePublicKeyFrom([symKeyLength]byte{0x42, 0x11, 0xAA, 0xDE, 0xAD, 0xBE, 0xEF}).K()), Equals, true)
	c.Assert(m.pm.b, DeepEquals, new(big.Int).SetBytes([]byte{0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F}))
}

func (s *GenericServerSuite) Test_prekeyMessage_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	m := &prekeyMessage{}
	_, ok := m.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = m.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyMessage_deserialize_shouldFailIfIncorrectVersion(c *C) {
	m := &prekeyMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyMessage_deserialize_shouldFailIfIncorrectMessageType(c *C) {
	m := &prekeyMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0C,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyMessage_deserialize_shouldFailOnIdentifier(c *C) {
	m := &prekeyMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyMessage_deserialize_shouldFailOnInstanceTag(c *C) {
	m := &prekeyMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyMessage_deserialize_shouldFailOnY(c *C) {
	m := &prekeyMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyMessage_deserialize_shouldFailOnB(c *C) {
	m := &prekeyMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x09,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyProfile_deserialize_shouldFailOnInstanceTag(c *C) {
	m := &prekeyProfile{}
	_, ok := m.deserialize([]byte{
		// instance tag
		0x12,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyProfile_deserialize_shouldFailOnExpiration(c *C) {
	m := &prekeyProfile{}
	_, ok := m.deserialize([]byte{
		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyProfile_deserialize_shouldFailOnSharedPrekey(c *C) {
	m := &prekeyProfile{}
	_, ok := m.deserialize([]byte{
		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyProfile_deserialize_shouldFailOnSignature(c *C) {
	m := &prekeyProfile{}
	_, ok := m.deserialize([]byte{
		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyEnsemble_deserialize_shouldFailOnMissingClientProfile(c *C) {
	m := &prekeyEnsemble{}
	_, ok := m.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyEnsemble_deserialize_shouldFailOnPrekeyProfile(c *C) {
	m := &prekeyEnsemble{}
	_, ok := m.deserialize([]byte{
		// - client profile

		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// - prekey profile

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_prekeyEnsemble_deserialize_shouldFailOnPrekeyMessage(c *C) {
	m := &prekeyEnsemble{}
	_, ok := m.deserialize([]byte{
		// - client profile

		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// - prekey profile

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// - prekey message

		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageInformationRequestMessage_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	m := &storageInformationRequestMessage{}
	_, ok := m.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = m.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageInformationRequestMessage_deserialize_shouldFailIfIncorrectVersion(c *C) {
	m := &storageInformationRequestMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x09,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageInformationRequestMessage_deserialize_shouldFailIfIncorrectMessageType(c *C) {
	m := &storageInformationRequestMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageInformationRequestMessage_deserialize_shouldFailOnMAC(c *C) {
	m := &storageInformationRequestMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x09,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageStatusMessage_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	m := &storageStatusMessage{}
	_, ok := m.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = m.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageStatusMessage_deserialize_shouldFailIfIncorrectVersion(c *C) {
	m := &storageStatusMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x0B,

		// instance tag
		0x42, 0x42, 0x42, 0x42,

		// number
		0x13, 0x34, 0xAB, 0xC0,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageStatusMessage_deserialize_shouldFailIfIncorrectMessageType(c *C) {
	m := &storageStatusMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// instance tag
		0x42, 0x42, 0x42, 0x42,

		// number
		0x13, 0x34, 0xAB, 0xC0,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageStatusMessage_deserialize_shouldFailOnInstanceTag(c *C) {
	m := &storageStatusMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0B,

		// instance tag
		0x42, 0x42,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageStatusMessage_deserialize_shouldFailOnNumber(c *C) {
	m := &storageStatusMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0B,

		// instance tag
		0x42, 0x42, 0x42, 0x42,

		// number
		0x13, 0x34,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_storageStatusMessage_deserialize_shouldFailOnMAC(c *C) {
	m := &storageStatusMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0B,

		// instance tag
		0x42, 0x42, 0x42, 0x42,

		// number
		0x13, 0x34, 0xAB, 0xC0,

		// MAC
		0x02, 0x02, 0x03, 0x04, 0x05, 0x06, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	_, ok := m.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = m.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_deserialize_shouldFailIfIncorrectVersion(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x10,

		// instance tag
		0x42, 0x53, 0x11, 0x2E,

		// identity
		0x00, 0x00, 0x00, 0x14, 0x66, 0x6f, 0x6f, 0x62,
		0x61, 0x72, 0x40, 0x62, 0x6c, 0x61, 0x72, 0x67,
		0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x6f,

		// versions
		0x00, 0x00, 0x00, 0x02,
		0x05, 0x42,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_deserialize_shouldFailIfIncorrectMessageType(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// instance tag
		0x42, 0x53, 0x11, 0x2E,

		// identity
		0x00, 0x00, 0x00, 0x14, 0x66, 0x6f, 0x6f, 0x62,
		0x61, 0x72, 0x40, 0x62, 0x6c, 0x61, 0x72, 0x67,
		0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x6f,

		// versions
		0x00, 0x00, 0x00, 0x02,
		0x05, 0x42,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_deserialize_shouldFailOnInstanceTag(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x10,

		// instance tag
		0x13, 0x34,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_deserialize_shouldFailOnIdentity(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x10,

		// instance tag
		0x42, 0x53, 0x11, 0x2E,

		// identity
		0x00, 0x00, 0x00, 0x14, 0x66, 0x6f, 0x6f, 0x62,
		0x61, 0x72, 0x40, 0x62, 0x6c, 0x61, 0x72, 0x67,
		0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalQueryMessage_deserialize_shouldFailOnVersions(c *C) {
	m := &ensembleRetrievalQueryMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x10,

		// instance tag
		0x42, 0x53, 0x11, 0x2E,

		// identity
		0x00, 0x00, 0x00, 0x14, 0x66, 0x6f, 0x6f, 0x62,
		0x61, 0x72, 0x40, 0x62, 0x6c, 0x61, 0x72, 0x67,
		0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6f, 0x6f,

		// versions
		0x00, 0x00, 0x00, 0x02,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_noPrekeyEnsemblesMessage_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	m := &noPrekeyEnsemblesMessage{}
	_, ok := m.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = m.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_noPrekeyEnsemblesMessage_deserialize_shouldFailIfIncorrectVersion(c *C) {
	m := &noPrekeyEnsemblesMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x05,
		// message type
		0x0E,

		// instance tag
		0x42, 0x53, 0x11, 0x2D,

		// message
		0x00, 0x00, 0x00, 0x1C, 0x6E, 0x6F, 0x20, 0x70,
		0x72, 0x65, 0x6B, 0x65, 0x79, 0x73, 0x2C, 0x20,
		0x73, 0x6F, 0x72, 0x72, 0x79, 0x20, 0x76, 0x65,
		0x72, 0x79, 0x20, 0x73, 0x6F, 0x72, 0x72, 0x79,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_noPrekeyEnsemblesMessage_deserialize_shouldFailIfIncorrectMessageType(c *C) {
	m := &noPrekeyEnsemblesMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// instance tag
		0x42, 0x53, 0x11, 0x2D,

		// message
		0x00, 0x00, 0x00, 0x1C, 0x6E, 0x6F, 0x20, 0x70,
		0x72, 0x65, 0x6B, 0x65, 0x79, 0x73, 0x2C, 0x20,
		0x73, 0x6F, 0x72, 0x72, 0x79, 0x20, 0x76, 0x65,
		0x72, 0x79, 0x20, 0x73, 0x6F, 0x72, 0x72, 0x79,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_noPrekeyEnsemblesMessage_deserialize_shouldFailOnInstanceTag(c *C) {
	m := &noPrekeyEnsemblesMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0E,

		// instance tag
		0x13, 0x34,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_noPrekeyEnsemblesMessage_deserialize_shouldFailOnMessage(c *C) {
	m := &noPrekeyEnsemblesMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x0E,

		// instance tag
		0x42, 0x53, 0x11, 0x2D,

		// message
		0x00, 0x00, 0x00, 0x1C, 0x6E, 0x6F, 0x20, 0x70,
		0x72, 0x65, 0x6B, 0x65, 0x79, 0x73, 0x2C, 0x20,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = m.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailIfIncorrectVersion(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x08,

		// N
		0x01,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// K
		0x01,

		// Client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// J
		0x01,

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailIfIncorrectMessageType(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// N
		0x01,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// K
		0x01,

		// Client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// J
		0x01,

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// prekey messages ecdh proof
		//   c
		0x42, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0xff, 0xff, 0xf1, 0xd0, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// prekey messages dh proof
		//   c
		0x43, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0x00, 0x00, 0x00, 0x05, 0xf0, 0xff, 0xf1, 0xd0,
		0x01,

		// prekey profile ecdh proof
		//   c
		0x43, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0xfd, 0xff, 0xf1, 0xd0, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnN(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnPrekeyMessage(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnK(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x01,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnInvalidK(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x00,

		// K
		0x02,

		// Client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// Client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnClientProfile(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x00,

		// K
		0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnJ(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x00,

		// K
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnPrekeyProfiles(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x00,

		// K
		0x00,

		// J
		0x01,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnMAC(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x00,

		// K
		0x00,

		// J
		0x01,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// prekey profile ecdh proof
		//   c
		0x43, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0xfd, 0xff, 0xf1, 0xd0, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// mac
		0x02, 0x02, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnPrekeyProfileProof(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x00,

		// K
		0x00,

		// J
		0x01,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// prekey profile ecdh proof
		//   c
		0x43, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0xfd, 0xff, 0xf1, 0xd0, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnEcdhPrekeyMessageProof(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x01,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// K
		0x01,

		// - Client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// J
		0x01,

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// prekey messages ecdh proof
		//   c
		0x42, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0xff, 0xff, 0xf1, 0xd0, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_publicationMessage_deserialize_shouldFailOnDhPrekeyMessageProof(c *C) {
	m := &publicationMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x08,

		// N
		0x01,

		// Prekey messages
		// prekey message 1
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,

		// K
		0x01,

		// - Client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// J
		0x01,

		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// prekey messages ecdh proof
		//   c
		0x42, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		//   v
		0xff, 0xff, 0xf1, 0xd0, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// prekey messages dh proof
		//   c
		0x43, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_deserialize_shouldFailIfNotLongEnoughForVersion(c *C) {
	m := &ensembleRetrievalMessage{}
	_, ok := m.deserialize([]byte{})

	c.Assert(ok, Equals, false)

	_, ok = m.deserialize([]byte{
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_deserialize_shouldFailIfIncorrectVersion(c *C) {
	m := &ensembleRetrievalMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x05,

		// message type
		0x13,

		// instance tag
		0x12, 0x34, 0xAA, 0xBB,

		// L
		0x01,

		// client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// prekey profile
		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// Prekey message
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_deserialize_shouldFailIfIncorrectMessageType(c *C) {
	m := &ensembleRetrievalMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x42,

		// instance tag
		0x12, 0x34, 0xAA, 0xBB,

		// L
		0x01,

		// client profile
		0x0, 0x0, 0x0, 0x4,

		// instance tag
		0x0, 0x1, 0x42, 0x53, 0x11, 0x2a,

		// public key
		0x00, 0x02, 0x00, 0x10,
		0x85, 0x9f, 0x37, 0x1f, 0xf3, 0x4f,
		0x36, 0x44, 0x5a, 0x99, 0xca, 0x8a, 0x11, 0x17,
		0x6b, 0xb8, 0x1e, 0xe0, 0x60, 0x39, 0x32, 0x76,
		0x71, 0xf4, 0xc6, 0x83, 0x77, 0x01, 0x45, 0x27,
		0x35, 0x3c, 0x75, 0xae, 0xee, 0xaa, 0xf9, 0x79,
		0x69, 0xa0, 0xd8, 0x9a, 0x3a, 0xb1, 0x48, 0xf6,
		0x44, 0x41, 0x83, 0x30, 0x9f, 0x41, 0x38, 0x1b,
		0xf3, 0x29, 0x00,

		// versions
		0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x04,

		// expiry
		0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x79, 0xf8,
		0xc7, 0x98,

		// signature
		0x15, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0,
		0x00, 0x00,

		// prekey profile
		// // version
		// 0x00, 0x04,

		// // message type
		// 0x0F,

		// instance tag
		0x12, 0x34, 0xAB, 0xC1,

		// expiration
		0x00, 0x00, 0x00, 0x00, 0x79, 0xf8, 0xc7, 0x98,

		// shared prekey
		0x00, 0x11,
		0xda, 0x17, 0xb3, 0x9b, 0xa7, 0x21, 0xbb, 0xd1,
		0xc3, 0xbb, 0x14, 0xc6, 0x5e, 0x6c, 0x94, 0xcb,
		0xb0, 0xde, 0xfa, 0x38, 0xc, 0xae, 0x55, 0xd0,
		0x67, 0xa5, 0xd8, 0xc2, 0x71, 0x56, 0x8d, 0xb3,
		0xd0, 0xf5, 0x18, 0x61, 0xc7, 0xa5, 0x84, 0xd3,
		0x2b, 0x18, 0xf0, 0x43, 0x26, 0x3c, 0xa5, 0x66,
		0x40, 0xaf, 0xab, 0xaf, 0x7e, 0x36, 0xd9, 0xc8,
		0x0,

		// sig
		0x16, 0x00, 0x00, 0x00, 0x12, 0x11, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,

		// Prekey message
		// version
		0x00, 0x04,

		// message type
		0x0F,

		// identifier
		0x42, 0x64, 0x21, 0x2E,

		// instance tag
		0x12, 0x34, 0xAB, 0xC0,

		// y
		0x7f, 0x65, 0x67, 0x92, 0xec, 0x7b, 0xf5, 0x5f,
		0xe5, 0x88, 0x89, 0x3a, 0xe9, 0xa, 0x12, 0xba,
		0xed, 0xfa, 0x2e, 0xe7, 0xa2, 0xf0, 0x75, 0x12,
		0x6e, 0x17, 0x39, 0x86, 0x70, 0xa, 0x4d, 0x6b,
		0xa0, 0x3c, 0x8, 0x80, 0x8d, 0xc0, 0xde, 0xe2,
		0xe4, 0x73, 0xe4, 0x3b, 0x4, 0x41, 0x60, 0xfd,
		0x7d, 0x37, 0x41, 0x73, 0x8d, 0x62, 0x8b, 0x0,
		0x80,

		// b
		0x00, 0x00, 0x00, 0x08,
		0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_deserialize_shouldFailOnInstanceTag(c *C) {
	m := &ensembleRetrievalMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x13,

		// instance tag
		0x13, 0x34,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_deserialize_shouldFailOnL(c *C) {
	m := &ensembleRetrievalMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x13,

		// instance tag
		0x12, 0x34, 0xAA, 0xBB,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_deserialize_shouldFailOnZeroL(c *C) {
	m := &ensembleRetrievalMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x13,

		// instance tag
		0x12, 0x34, 0xAA, 0xBB,

		// L
		0x00,
	})

	c.Assert(ok, Equals, false)
}

func (s *GenericServerSuite) Test_ensembleRetrievalMessage_deserialize_shouldFailOnPrekeyEnsemble(c *C) {
	m := &ensembleRetrievalMessage{}
	_, ok := m.deserialize([]byte{
		// version
		0x00, 0x04,

		// message type
		0x13,

		// instance tag
		0x12, 0x34, 0xAA, 0xBB,

		// L
		0x01,
	})

	c.Assert(ok, Equals, false)
}
