package prekeyserver

import (
	"crypto/rand"
	"math/big"

	"github.com/coyim/gotrax"
	. "gopkg.in/check.v1"
)

func (s *GenericServerSuite) Test_generateEcdhProof_and_verify_generatesProofsThatValidates(c *C) {
	wr := gotrax.ReaderIntoWithRandom(gotrax.FixtureRand())
	values := make([]*gotrax.Keypair, 3)
	values[0] = gotrax.GenerateKeypair(wr)
	values[1] = gotrax.GenerateKeypair(wr)
	values[2] = gotrax.GenerateKeypair(wr)
	m := [64]byte{0x01, 0x02, 0x03}

	proof, e := generateEcdhProof(wr, values, m[:], usageProofMessageEcdh)
	c.Assert(e, IsNil)

	values2 := make([]*gotrax.PublicKey, 3)
	values2[0] = values[0].Pub
	values2[1] = values[1].Pub
	values2[2] = values[2].Pub

	c.Assert(proof.verify(values2, m[:], usageProofMessageEcdh), Equals, true)
	c.Assert(proof.verify(values2, m[:], usageProofSharedEcdh), Equals, false)

	m2 := [64]byte{0x02, 0x02, 0x03}
	c.Assert(proof.verify(values2, m2[:], usageProofMessageEcdh), Equals, false)

	wrongDL := gotrax.GenerateKeypair(wr)
	values2[1] = wrongDL.Pub
	c.Assert(proof.verify(values2, m[:], usageProofMessageEcdh), Equals, false)
}

func randomDhSecretValue(wr gotrax.WithRandom) *big.Int {
	res, _ := rand.Int(wr.RandReader(), dhQ)
	return res
}

func (s *GenericServerSuite) Test_generateDhProof_and_verify_generatesProofsThatValidates(c *C) {
	wr := gotrax.ReaderIntoWithRandom(gotrax.FixtureRand())
	valuesPriv := make([]*big.Int, 3)
	valuesPriv[0] = randomDhSecretValue(wr)
	valuesPriv[1] = randomDhSecretValue(wr)
	valuesPriv[2] = randomDhSecretValue(wr)

	valuesPub := make([]*big.Int, 3)
	valuesPub[0] = new(big.Int).Exp(g3, valuesPriv[0], dhP)
	valuesPub[1] = new(big.Int).Exp(g3, valuesPriv[1], dhP)
	valuesPub[2] = new(big.Int).Exp(g3, valuesPriv[2], dhP)

	m := [64]byte{0x01, 0x02, 0x03}

	proof, e := generateDhProof(wr, valuesPriv, valuesPub, m[:], usageProofMessageDh)
	c.Assert(e, IsNil)

	c.Assert(proof.verify(valuesPub, m[:], usageProofMessageDh), Equals, true)
	c.Assert(proof.verify(valuesPub, m[:], usageProofSharedEcdh), Equals, false)

	m2 := [64]byte{0x02, 0x02, 0x03}
	c.Assert(proof.verify(valuesPub, m2[:], usageProofMessageDh), Equals, false)

	valuesPub[1].Mul(valuesPub[1], valuesPub[1])
	valuesPub[1].Mod(valuesPub[1], dhP)
	c.Assert(proof.verify(valuesPub, m[:], usageProofMessageDh), Equals, false)
}

func (s *GenericServerSuite) Test_generateEcdhProof_generatesSpecificValue(c *C) {
	wr := gotrax.ReaderIntoWithRandom(gotrax.FixtureRand())
	values := make([]*gotrax.Keypair, 5)
	values[0] = gotrax.GenerateKeypair(wr)
	values[1] = gotrax.GenerateKeypair(wr)
	values[2] = gotrax.GenerateKeypair(wr)
	values[3] = gotrax.GenerateKeypair(wr)
	values[4] = gotrax.GenerateKeypair(wr)
	m := [64]byte{0x03, 0x03, 0x01}

	proof, e := generateEcdhProof(wr, values, m[:], usageProofMessageEcdh)
	c.Assert(e, IsNil)

	c.Assert(proof.c, DeepEquals, []byte{
		0xbc, 0x8c, 0xb6, 0x80, 0xa5, 0x0c, 0x9e, 0x50,
		0xb3, 0x01, 0x8a, 0x36, 0x95, 0x20, 0xac, 0x54,
		0xfc, 0x30, 0xdf, 0x78, 0x0e, 0xc6, 0xdd, 0x1e,
		0xa7, 0x15, 0xae, 0x83, 0x09, 0x50, 0x22, 0xfe,
		0xd2, 0x9e, 0x44, 0x5a, 0x7b, 0x04, 0xbb, 0x4c,
		0x27, 0xe1, 0x55, 0x1c, 0x43, 0xf6, 0x25, 0x95,
		0x7a, 0xb9, 0xbf, 0xed, 0x2c, 0x90, 0x1e, 0x4f,
		0xfd, 0xfa, 0x54, 0x95, 0x04, 0x19, 0x02, 0x5e,
	})
	c.Assert(gotrax.SerializeScalar(proof.v), DeepEquals, []byte{
		0x85, 0x52, 0xb9, 0xd0, 0x72, 0x20, 0xed, 0x97,
		0x8e, 0x1a, 0xe5, 0x8f, 0x05, 0x51, 0x4a, 0x56,
		0x25, 0x08, 0xf3, 0xec, 0xd7, 0x7a, 0xbc, 0xd4,
		0x56, 0x5e, 0x21, 0x77, 0x2a, 0x2c, 0x66, 0x04,
		0x0f, 0xf9, 0xc2, 0xda, 0x5c, 0x9b, 0x24, 0x43,
		0xeb, 0xb7, 0x5f, 0xdf, 0xb4, 0x15, 0x3a, 0x99,
		0x02, 0x51, 0x94, 0x9b, 0x2b, 0x10, 0xef, 0x2f,
	})
}

func (s *GenericServerSuite) Test_generateDhProof_generatesSpecificValues(c *C) {
	wr := gotrax.ReaderIntoWithRandom(gotrax.FixtureRand())
	valuesPriv := make([]*big.Int, 5)
	valuesPriv[0] = randomDhSecretValue(wr)
	valuesPriv[1] = randomDhSecretValue(wr)
	valuesPriv[2] = randomDhSecretValue(wr)
	valuesPriv[3] = randomDhSecretValue(wr)
	valuesPriv[4] = randomDhSecretValue(wr)

	valuesPub := make([]*big.Int, 5)
	valuesPub[0] = new(big.Int).Exp(g3, valuesPriv[0], dhP)
	valuesPub[1] = new(big.Int).Exp(g3, valuesPriv[1], dhP)
	valuesPub[2] = new(big.Int).Exp(g3, valuesPriv[2], dhP)
	valuesPub[3] = new(big.Int).Exp(g3, valuesPriv[3], dhP)
	valuesPub[4] = new(big.Int).Exp(g3, valuesPriv[4], dhP)

	m := [64]byte{0x42, 0x02, 0x03}

	proof, e := generateDhProof(wr, valuesPriv, valuesPub, m[:], usageProofMessageDh)
	c.Assert(e, IsNil)
	c.Assert(proof.c, DeepEquals, []byte{
		0x27, 0x74, 0x7e, 0x5c, 0x68, 0x38, 0xb, 0xd1,
		0xc9, 0x46, 0x44, 0xa1, 0x27, 0x44, 0x88, 0xde,
		0xc7, 0x41, 0x1a, 0x6e, 0xfa, 0xed, 0xf2, 0x71,
		0x4e, 0x3e, 0x37, 0x86, 0xa1, 0x3f, 0x3c, 0x6e,
		0x64, 0x1a, 0xc2, 0x7d, 0x16, 0xac, 0x2, 0x8d,
		0x59, 0xd, 0xe4, 0x8d, 0x6, 0xe2, 0xc0, 0xe4,
		0x47, 0xa2, 0xe, 0x92, 0x1e, 0x4a, 0x27, 0xba,
		0x9a, 0x1a, 0x39, 0x0, 0xa8, 0x4e, 0x47, 0x6c,
	})
	c.Assert(proof.v.Bytes(), DeepEquals, []byte{
		0x5c, 0xb9, 0x43, 0x7e, 0x78, 0x53, 0xd, 0x1c,
		0x68, 0xda, 0x77, 0x2, 0x49, 0xa8, 0x19, 0xf1,
		0xa2, 0xe3, 0x97, 0xc4, 0x2f, 0x3f, 0x6f, 0x13,
		0xae, 0xe4, 0x80, 0xf3, 0x42, 0xda, 0xff, 0x3,
		0x78, 0x65, 0x86, 0x5a, 0x8d, 0xe2, 0x5c, 0x18,
		0x4, 0x55, 0x25, 0x5a, 0x2, 0xd4, 0x57, 0x7c,
		0xf6, 0x1a, 0x30, 0xe1, 0x32, 0xf6, 0xe2, 0xbb,
		0x1c, 0x57, 0xb0, 0x6c, 0xa3, 0xbc, 0xc5, 0x5b,
		0xf4, 0x8c, 0x22, 0xb7, 0xb4, 0xbd, 0xcb, 0x73,
		0xd6, 0xa5, 0x53, 0x44, 0x61, 0x4a, 0x4, 0x7f,
		0x8a, 0x44, 0xfa, 0xf8, 0x20, 0x19, 0x50, 0x22,
		0xfb, 0x87, 0x8c, 0x73, 0x21, 0x95, 0xe, 0xed,
		0xc5, 0x95, 0xff, 0xe6, 0xa, 0x8b, 0x4f, 0x7d,
		0x2e, 0x36, 0xec, 0x6d, 0x47, 0x5a, 0x7c, 0x39,
		0xa7, 0xd5, 0xda, 0xe0, 0x3b, 0x13, 0xa5, 0x9b,
		0x66, 0x20, 0x27, 0xd8, 0x39, 0x83, 0xba, 0xf2,
		0x77, 0x4e, 0x38, 0x31, 0x4, 0xf6, 0x1, 0x5b,
		0x29, 0x5, 0x7, 0x50, 0xf1, 0x28, 0xf, 0xd7,
		0x3b, 0x4e, 0x64, 0x1e, 0x31, 0x85, 0xbf, 0xd,
		0x54, 0xb8, 0x4a, 0x73, 0xfc, 0x9c, 0xd3, 0x10,
		0xb, 0x6f, 0x65, 0x13, 0x48, 0x35, 0x2e, 0xe,
		0x78, 0x5b, 0xac, 0xda, 0xad, 0x7c, 0x9c, 0x7d,
		0x46, 0xc6, 0x82, 0x6b, 0x5b, 0x5d, 0xa3, 0xfd,
		0x85, 0x9b, 0x19, 0xc4, 0x5d, 0xf7, 0x24, 0x2c,
		0x31, 0xd9, 0xc0, 0x48, 0xbe, 0xb0, 0xcd, 0x68,
		0x9b, 0x8f, 0x6e, 0x5e, 0x6b, 0x18, 0x20, 0x96,
		0x19, 0x45, 0xd9, 0x3c, 0x73, 0x35, 0xcc, 0xe4,
		0xcd, 0x55, 0xb7, 0xba, 0x62, 0x6b, 0x82, 0x3a,
		0x42, 0x3c, 0xfd, 0x37, 0x59, 0x94, 0xb7, 0x6c,
		0x59, 0x60, 0x59, 0x39, 0x6c, 0xd0, 0x30, 0x82,
		0x62, 0x4d, 0x3a, 0x9f, 0xf8, 0x41, 0x3f, 0x73,
		0x58, 0xee, 0x78, 0x5a, 0x83, 0xa4, 0xe5, 0x46,
		0x1, 0x43, 0x30, 0xbf, 0x4, 0xd1, 0xf0, 0x95,
		0x2e, 0x45, 0xf, 0x22, 0xe4, 0xdc, 0xd3, 0x91,
		0x95, 0xbe, 0xc7, 0xe9, 0xc, 0x11, 0x9d, 0x8c,
		0x79, 0xd3, 0x2e, 0xe, 0x91, 0xfe, 0xf2, 0x9b,
		0x1a, 0x1d, 0xe8, 0x7f, 0xa, 0x85, 0xff, 0x41,
		0xd7, 0x33, 0x42, 0x7f, 0xe8, 0xd5, 0xc4, 0x9c,
		0x5f, 0x57, 0x83, 0x84, 0x3d, 0x57, 0xee, 0xee,
		0x7e, 0x14, 0x66, 0x3f, 0x20, 0x2c, 0x3a, 0xc1,
		0xe, 0x23, 0xdd, 0x91, 0x79, 0x39, 0x7b, 0x8e,
		0x7f, 0x53, 0x27, 0xc8, 0x8d, 0xc1, 0x7c, 0xc1,
		0x5a, 0x6a, 0xce, 0x85, 0x20, 0xfc, 0x33, 0xfc,
		0xa1, 0x7c, 0xb8, 0x77, 0x90, 0xcd, 0x4e, 0xba,
		0xd3, 0xa8, 0xc9, 0x84, 0xc5, 0x88, 0x76, 0x53,
		0x1a, 0x62, 0x8a, 0xce, 0x97, 0xd6, 0x17, 0x9e,
		0xed, 0xfa, 0xa8, 0xbe, 0x3f, 0x5b, 0xd3, 0xbe,
		0x97, 0x99, 0x80, 0x49, 0x8a, 0xb2, 0x39, 0xc6,
	})
}
